#!/usr/bin/env ansible-playbook
#
# (c) 2016 DataNexus Inc.  All Rights Reserved
---
# Build our telegraf and kafka host groups
- name: Create telegraf and kafka host groups
  hosts: localhost
  gather_facts: no
  vars_files:
    - vars/telegraf.yml
  tasks:
    # always load the 'local variables file', if one was defined, to get any
    # variables we might need from that file when constructing our host groups
    - name: Load local variables file
      include_vars:
        file: "{{local_vars_file}}"
      when: not (local_vars_file is undefined or local_vars_file is none or local_vars_file | trim == '')
    # regardless of whether the `application` value is still set to the default
    # `telegraf` value from the `vars/telegraf.yml` file or was reset in the
    # input `local_vars_file` (above), set a fact for the `localhost` so that
    # we can use it in our third play (below) to define the target hosts that
    # we are provisioning with Telegraf agents to using this playbook
    - set_fact:
        application: "{{application}}"
    # if we're using dynamic provisioning; build the host groups from the
    # meta-data associated with the matching nodes in the selected cloud
    - include_role:
        name: build-app-host-groups
      vars:
        host_group_list:
          - { name: "{{application}}", filter_roles: "{{'false' | bool}}" }
          - name: kafka
      when: cloud is defined and (cloud == 'aws' or cloud == 'osp')

# Collect the 'hostvars' facts from the kafka host group
- name: Gather facts from kafka host group
  hosts: kafka
  tasks: []

# Then, deploy our Telegraf agents to the nodes in the application host group
# that was passed in (or 'the 'telegraf' host group if a separate `application`
# target wasn't defined in the local variables file)
- name: Install/configure telegraf agents
  hosts: "{{hostvars['localhost']['application']}}"
  gather_facts: no
  vars_files:
    - vars/telegraf.yml
  vars:
    - combined_package_list: "{{ (default_packages|default([])) | union(telegraf_package_list|default([])) | union((install_packages_by_tag|default({})).telegraf|default([])) }}"
    - kafka_nodes: "{{groups['kafka']}}"
  pre_tasks:
    # first, load the local variables file (if one was defined); this will initialize
    # the variables used in our playbook (and override any values in the 'vars/telegraf.yml'
    # file with redefined values from the 'local_vars_file', if any)
    - name: Load local variables file (if defined)
      include_vars:
        file: "{{local_vars_file}}"
      when: not (local_vars_file is undefined or local_vars_file is none or local_vars_file | trim == '')
    # then, restart the network (unless the skip_network_restart was set)
    # and gather some facts about our Telegraf node(s)
    - name: Ensure the network interfaces are up on our Telegraf node(s)
      service:
        name: network
        state: restarted
      become: true
      when: not (skip_network_restart is defined or skip_network_restart)
    - name: Gather facts from the Telegraf node(s)
      setup:
    # in these two steps, we obtain the interface names for our data_iface
    # and api_iface (provided an interface description was provided for each)
    - include_role:
        name: get-iface-names
      vars:
        iface_descriptions: "{{iface_description_array}}"
      when: not (iface_description_array is undefined or iface_description_array == [])
    # and now that we know we have our data_iface identified, we can construct
    # the list of kfka_nodes (the data_iface IP addresses of our kafka_nodes)
    - set_fact:
        kfka_nodes: "{{(kafka_nodes | default([])) | map('extract', hostvars, [('ansible_' + data_iface), 'ipv4', 'address']) | list}}"
    # if we're provisioning a RHEL machine, then we need to ensure that
    # it's subscribed before we can install anything (if it hasn't been
    # registered already, of course, if that's the case then we can skip
    # this step)
    - block:
      - redhat_subscription:
          state: present
          username: "{{rhel_username}}"
          password: "{{rhel_password}}"
          consumer_id: "{{rhel_consumer_id}}"
        become: true
        when: rhel_username is defined and rhel_password is defined and rhel_consumer_id is defined
      when: ansible_distribution == 'RedHat'
  # Now that we have all of the facts we need, run the roles that are used to
  # deploy and configure Telegraf
  roles:
    - role: get-iface-addr
      iface_name: "{{data_iface}}"
      as_fact: "data_addr"
    - role: setup-web-proxy
    - role: add-local-repository
      yum_repository: "{{yum_repo_url}}"
      when: yum_repo_url is defined and ansible_distribution != 'RedHat'
    - role: install-packages
      package_list: "{{combined_package_list}}"
    - role: add-package-repo
      package_name: influxdb
      repo_name: "InfluxDB Repository"
      repo_url: "https://repos.influxdata.com/rhel/$releasever/$basearch/stable"
      repo_key_url: "https://repos.influxdata.com/influxdb.key"
    - dn-telegraf
